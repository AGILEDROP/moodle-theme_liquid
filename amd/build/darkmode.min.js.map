{"version":3,"file":"darkmode.min.js","sources":["../src/darkmode.js"],"sourcesContent":["define([], function() {\n    var init = function() {\n        const darkThemeMq = window.matchMedia(\"(prefers-color-scheme: dark)\");\n        const darkThemeToggle = document.querySelectorAll(\".darktheme-checkbox\");\n\n        const setTheme = function(theme) {\n            document.documentElement.setAttribute('data-bs-theme', theme);\n        };\n\n        const updateCheckboxes = function(checked) {\n            darkThemeToggle.forEach(function(checkbox) {\n                checkbox.checked = checked;\n            });\n        };\n\n        const initializeTheme = function() {\n            const storedDarkThemeSetting = getCookie(\"darkThemeEnabled\");\n\n            if (storedDarkThemeSetting === null) {\n                setCookie(\"darkThemeEnabled\", darkThemeMq.matches ? \"1\" : \"0\");\n                updateCheckboxes(darkThemeMq.matches);\n                setTheme(darkThemeMq.matches ? 'dark' : 'light');\n            } else {\n                const isDarkTheme = storedDarkThemeSetting === \"1\";\n                updateCheckboxes(isDarkTheme);\n                setTheme(isDarkTheme ? 'dark' : 'light');\n            }\n        };\n\n        const handleCheckboxChange = function(e) {\n            const isDarkThemeEnabled = e.target.checked;\n\n            setTheme(isDarkThemeEnabled ? 'dark' : 'light');\n            setCookie(\"darkThemeEnabled\", isDarkThemeEnabled ? \"1\" : \"0\");\n            updateCheckboxes(isDarkThemeEnabled);\n        };\n\n        darkThemeToggle.forEach(function(checkbox) {\n            checkbox.addEventListener(\"change\", handleCheckboxChange);\n        });\n\n        initializeTheme();\n\n        /**\n         * Retrieves the value of a cookie by name.\n         * @param {string} name - The name of the cookie.\n         * @returns {string|null} - The value of the cookie or null if not found.\n         */\n        function getCookie(name) {\n            const value = `; ${document.cookie}`;\n            const parts = value.split(`; ${name}=`);\n            if (parts.length === 2) {\n                return parts.pop().split(';').shift();\n            }\n            return null;\n        }\n\n        /**\n         * Sets a cookie with the given name and value.\n         * @param {string} name - The name of the cookie.\n         * @param {string} value - The value to set for the cookie.\n         */\n        function setCookie(name, value) {\n            document.cookie = `${name}=${value}; path=/; SameSite=None; Secure`;\n        }\n    };\n\n    return {\n        init: init\n    };\n});"],"names":["define","init","darkThemeMq","window","matchMedia","darkThemeToggle","document","querySelectorAll","setTheme","theme","documentElement","setAttribute","updateCheckboxes","checked","forEach","checkbox","handleCheckboxChange","e","isDarkThemeEnabled","target","setCookie","name","value","cookie","addEventListener","storedDarkThemeSetting","parts","split","length","pop","shift","getCookie","matches","isDarkTheme","initializeTheme"],"mappings":"AAAAA,+BAAO,IAAI,iBAmEA,CACHC,KAnEO,iBACDC,YAAcC,OAAOC,WAAW,gCAChCC,gBAAkBC,SAASC,iBAAiB,uBAE5CC,SAAW,SAASC,OACtBH,SAASI,gBAAgBC,aAAa,gBAAiBF,QAGrDG,iBAAmB,SAASC,SAC9BR,gBAAgBS,SAAQ,SAASC,UAC7BA,SAASF,QAAUA,YAkBrBG,qBAAuB,SAASC,SAC5BC,mBAAqBD,EAAEE,OAAON,QAEpCL,SAASU,mBAAqB,OAAS,SACvCE,UAAU,mBAAoBF,mBAAqB,IAAM,KACzDN,iBAAiBM,8BA4BZE,UAAUC,KAAMC,OACrBhB,SAASiB,iBAAYF,iBAAQC,yCA1BjCjB,gBAAgBS,SAAQ,SAASC,UAC7BA,SAASS,iBAAiB,SAAUR,yBAvBhB,iBACdS,gCAgCSJ,YAETK,kBADapB,SAASiB,QACRI,kBAAWN,cACV,IAAjBK,MAAME,cACCF,MAAMG,MAAMF,MAAM,KAAKG,eAE3B,KAtCwBC,CAAU,uBAEV,OAA3BN,uBACAL,UAAU,mBAAoBlB,YAAY8B,QAAU,IAAM,KAC1DpB,iBAAiBV,YAAY8B,SAC7BxB,SAASN,YAAY8B,QAAU,OAAS,aACrC,OACGC,YAAyC,MAA3BR,uBACpBb,iBAAiBqB,aACjBzB,SAASyB,YAAc,OAAS,UAgBxCC"}